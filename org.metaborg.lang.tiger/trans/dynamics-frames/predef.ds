module dynamics-frames/predef

imports dynamics-frames/nabl2-link
imports dynamics-frames/functions
imports nabl2/runtime/interpreter/scopegraph-api

signature

  constructors
    nativePrintV     : Exp
    nativeOrdV       : Exp
    nativeChrV       : Exp
    nativeNotV       : Exp
    nativeExitV      : Exp
    nativeSizeV      : Exp
    nativeSubstringV : Exp
    nativeConcatV    : Exp
    nativeGetcharV   : Exp
    nativeFlushV     : Exp
  
  arrows
    stdLib() --> U
    farg2Occurrences(List(FArg)) --> (List(FArg) * List(Occurrence))
    registerBuiltin(Name, List(FArg), Exp) --> U
  
rules

  // predefined functions  
  stdLib() --> U()
  where
      registerBuiltin("print", [FArg(__Id2Occ__("s"), Tid(__Id2Occ__("string")))], nativePrintV()) --> _;
      registerBuiltin("flush", [], nativeFlushV()) --> _;
      registerBuiltin("ord", [FArg(__Id2Occ__("s"), Tid(__Id2Occ__("string")))], nativeOrdV()) --> _;
      registerBuiltin("chr", [FArg(__Id2Occ__("i"), Tid(__Id2Occ__("int")))], nativeChrV()) --> _;
      registerBuiltin("not", [FArg(__Id2Occ__("i"), Tid(__Id2Occ__("int")))], nativeNotV()) --> _;
      registerBuiltin("exit", [FArg(__Id2Occ__("i"), Tid(__Id2Occ__("int")))], nativeExitV()) --> _;
      registerBuiltin("size", [FArg(__Id2Occ__("s"), Tid(__Id2Occ__("string")))], nativeSizeV()) --> _;
      registerBuiltin("substring", [FArg(__Id2Occ__("s"), Tid(__Id2Occ__("string"))), FArg(__Id2Occ__("i1"), Tid(__Id2Occ__("int"))), FArg(__Id2Occ__("i2"), Tid(__Id2Occ__("int")))], nativeSubstringV()) --> _;
      registerBuiltin("concat", [FArg(__Id2Occ__("s1"), Tid(__Id2Occ__("string"))), FArg(__Id2Occ__("s2"), Tid(__Id2Occ__("string")))], nativeConcatV()) --> _;
      registerBuiltin("getchar", [], nativeGetcharV()) --> _;
      registerBuiltin("flush", [], nativeFlushV()) --> _
  
  farg2Occurrences([]) --> ([] : List(FArg), [] : List(Occurrence)) : (List(FArg) * List(Occurrence))
  
  T |- farg2Occurrences([FArg(__Id2Occ__(name), ty) | args]) --> ([arg | args'], [occ_decl | decls])
  where
    mkOccurrenceHavingIndex("Var", name, nabl2_phantomIndex(T)) --> occ_decl;
    FArg(occ_decl, ty) => arg;
    farg2Occurrences(args) --> (args', decls)
  
  F_parent, T |- registerBuiltin(name, args, e) --> U()
  where
    // create an occurrence for the declaration
    mkOccurrenceHavingIndex("Var", name, T) --> occ_decl;
    // create occurrences for arguments
    farg2Occurrences(args) --> (args', decls);
    // create a scope identifier
    Scope("<:implicit:fun:>", name) => s_fun;
    // init a scope
    newScope(s_fun, decls, [], { P() |--> [scopeOf(F_parent):Scope]}, {}) --> _;
    // store
    set(mkAddr(F_parent, occ_decl), ClosureV(args', e, s_fun, F_parent))  --> _
  
  // predefined function reductions
  F |- nativePrintV() --> UnitV()
  where
    declsOf(scopeOf(F)) --> [arg];
    get(mkAddr(F, arg)) --> StringV(s);
    printS(s) => _

  F |- nativeOrdV() --> IntV(result)
  where
    declsOf(scopeOf(F)) --> [arg];
    get(mkAddr(F, arg)) --> StringV(s);
    ordS(s) => result

  F |- nativeChrV() --> StringV(result)
  where
    declsOf(scopeOf(F)) --> [arg];
    get(mkAddr(F, arg)) --> IntV(i);
    chrI(i) => result
    
  F |- nativeNotV() --> IntV(result)
  where
    declsOf(scopeOf(F)) --> [arg];
    get(mkAddr(F, arg)) --> IntV(i);
    notI(i) => result
  
  F |- nativeExitV() --> UnitV()
  where
    declsOf(scopeOf(F)) --> [arg];
    get(mkAddr(F, arg)) --> IntV(i);
    notI(i) => _
    
  F |- nativeSizeV() --> IntV(result)
  where
    declsOf(scopeOf(F)) --> [arg];
    get(mkAddr(F, arg)) --> StringV(s);
    sizeS(s) => result
  
  F |- nativeSubstringV() --> StringV(result)
  where
    declsOf(scopeOf(F)) --> [arg1, arg2, arg3];
    get(mkAddr(F, arg1)) --> StringV(s);
    get(mkAddr(F, arg2)) --> IntV(i1);
    get(mkAddr(F, arg3)) --> IntV(i2);
    substringSII(s, i1, i2) => result
  
  F |- nativeConcatV() --> StringV(result)
  where
    declsOf(scopeOf(F)) --> [arg1, arg2];
    get(mkAddr(F, arg1)) --> StringV(s1);
    get(mkAddr(F, arg2)) --> StringV(s2);
    concatS(s1, s2) => result
  
  nativeGetcharV() --> StringV(result)
  where
    getcharS("") => result
  
  nativeFlushV() --> UnitV()
  where
    flushS("") => _
  