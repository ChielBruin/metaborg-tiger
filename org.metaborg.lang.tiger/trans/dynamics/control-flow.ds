module dynamics/control-flow

imports ds-signatures/Control-Flow-sig
imports dynamics/base
imports dynamics/store
imports dynamics/natives
imports dynamics/numbers

signature
  constructors
    BreakV : V
    Breakable : Exp * Exp -> Exp
  arrows
    E |- evalSeq(List(Exp)) :: Hh --> V :: Hh
  
rules

  Seq(es) --> evalSeq(es)
  
  evalSeq([]) --> UnitV()
  
  evalSeq([vv]) --> vv
  
  evalSeq([vv | es@[_|_]]) --> vv
  where
    case vv of {
      BreakV() =>
        BreakV() => vv
      otherwise =>
        evalSeq(es) --> vv
    }
  
  
  IfThen(e1, e2) --> If(e1, e2, Seq([]))
  
  If(IntV(i), e1, e2) --> vv
  where
    case i of {
      0 =>
        e2 --> vv
      otherwise =>
        e1 --> vv
    }
  
  e@While(e1, e2) --> IfThen(e1, Breakable(e2, e))
  
  Breakable(v1, e2) --> vv
  where
    case v1 of {
      BreakV() =>
        UnitV() => vv
      otherwise =>
        e2 --> vv
    }
  
  For(Var(x), e1, e2, e3) -->
    Let([VarDecNoType(x, e1),
         VarDecNoType(end, e2)], 
        [While(Leq(Var(x), Var(end)), Seq([
           e3,
           Assign(Var(x), Plus(Var(x), Int("1")))
         ]))])
  where printI(fresh) : Id => end  // capture?
  
  Break() --> BreakV()
  
