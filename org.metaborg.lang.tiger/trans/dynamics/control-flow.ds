module dynamics/control-flow

imports ds-signatures/Control-Flow-sig
imports dynamics/base
imports dynamics/store
imports dynamics/natives
imports dynamics/numbers
imports
  dynamics/stdlib/exceptions
  dynamics/stdlib/loop

signature
  sort aliases
    V = Val
  
  constructors
    __Exp2Evaluatable__ : Exp -> Evaluatable {implicit}
    __Exp2Condition__: Exp -> Condition {implicit}
    
  arrows
    E |- evalSeq(List(Exp)) --> V
  
rules

  Seq(es) --> evalSeq(es)
  
  evalSeq([]) --> UnitV()
  
  evalSeq([e]) --> e
  
  evalSeq([e | es@[_|_]]) --> evalSeq(es)
  where
    e --> v
  
  
  IfThen(e1, e2) --> If(e1, e2, Seq([]))
  
  If(IntV(i), e1, e2) --> v
  where
    case i of {
      0         -> e2 --> v
      otherwise -> e1 --> v
    }
  
  Break() --> UnitV()
  where
    doBreak(UnitV()) --> _
  
  e@While(e1, _) -->  whileLoop(e1, e, UnitV())
  
  __Exp2Condition__(IntV(i)) --> bv
  where
    case i of {
      1         -> true => bv
      otherwise -> false => bv
    }
  
  __Exp2Evaluatable__(While(_, e)) --> e
  
  For(Var(x), e1, e2, e3) -->
    Let([VarDecNoType(x, e1),
         VarDecNoType(__Id2Occ__(end), e2)], 
        [While(Leq(Var(x), Var(__Id2Occ__(end))), Seq([
           e3,
           Assign(Var(x), Plus(Var(x), Int("1")))
         ]))])
  where int2string(fresh) : Id => end  // capture?
  
