module functions

imports ds-signatures/Functions-sig
imports dynamics/base
imports dynamics/store
imports dynamics/strings
imports dynamics/bindings
imports dynamics/natives

signature
  sorts
    ID
  constructors
    ClosureV : List(FArg) * Exp * Env -> V
    __Id2ID__ : String -> Id {implicit}
    ID : String -> ID
  arrows
    E |- funEnv(List(FunDec)) :: H --> Env :: H
    E |- evalFuns(List(FunDec)) :: H --> Env :: H       
    E |- evalArgs(List(FArg), List(Exp)) :: H --> Env :: H
    
rules // function definition

  FunDecs(fds) --> E
  where 
    funEnv(fds) --> E; 
    E |- evalFuns(fds) --> _. 
  
  E |- funEnv([]) --> E.  
  
  funEnv([FunDec(f, _, _, _) | fds]) --> E
  where 
    E bindVar(f, UndefV()) |- funEnv(fds) --> E.
  
  E |- evalFuns([]) --> E.
  
  E |- evalFuns([FunDec(f, args, _, e) | fds]) --> evalFuns(fds)
  where 
    writeVar(f, ClosureV(args, e, E)) --> _.

rules // function call
  
  Call("print", [StringV(s)]) --> UnitV()
  where
    printS(s) => _.
  
  Call(f, es) --> v
  where
    readVar(f) --> ClosureV(args, e, E);
    evalArgs(args, es) --> E';
    E {E', E} |- e --> v.
    
  evalArgs([], []) --> {}.
    
  evalArgs([FArg(x, _) | args], [v | es]) --> {x |--> a, E}
  where 
    allocate(v) --> a; 
    evalArgs(args, es) --> E.
    
rules // procedure definition
 
  funEnv([ProcDec(f, _, _) | fds]) --> E
  where 
    E bindVar(f, UndefV()) |- funEnv(fds) --> E.
 
  E |- evalFuns([ProcDec(f, args, e) | fds]) --> evalFuns(fds)
  where 
    writeVar(f, ClosureV(args, e, E)) --> _.
    