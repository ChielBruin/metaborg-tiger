module dynamics/functions

imports ds-signatures/Functions-sig
imports dynamics/base
imports dynamics/store
imports dynamics/strings
imports dynamics/bindings
imports dynamics/natives
imports dynamics/numbers

signature
  sorts
  
  constructors
    ClosureV : List(FArg) * Exp * Env -> V
  arrows
    E |- funEnv(List(FunDec)) :: Hh --> Env :: Hh
    E |- evalFuns(List(FunDec)) :: Hh --> Env :: Hh     
    E |- evalArgs(List(FArg), List(Exp)) :: Hh --> Env :: Hh

rules // function definition

  FunDecs(fds) --> E
  where 
    funEnv(fds) --> E; 
    E |- evalFuns(fds) --> _ 
  
  E |- funEnv([]) --> E
  
  funEnv([FunDec(f : Id, _, _, _) | fds]) --> E
  where 
    E bindVar(f, UndefV()) |- funEnv(fds) --> E
  
  E |- evalFuns([]) --> E
  
  E |- evalFuns([FunDec(f : Id, args, _, e) | fds]) --> evalFuns(fds)
  where 
    writeVar(f, ClosureV(args, e, E)) --> _

rules // function call
  
  Call(f : Id, args) --> vv
  where
    readVar(f) --> ClosureV(params, e, E);
    evalArgs(params, args) --> E';
    E {E', E} |- e --> vv
    
  evalArgs([], []) --> {}
    
  evalArgs([FArg(x : Id, _) | args], [vv | es]) --> {x |--> a, E}
  where 
    allocate(vv) --> a; 
    evalArgs(args, es) --> E
    
rules // procedure definition
 
  funEnv([ProcDec(f : Id, _, _) | fds]) --> E
  where 
    E bindVar(f, UndefV()) |- funEnv(fds) --> E
 
  E |- evalFuns([ProcDec(f : Id, args, e) | fds]) --> evalFuns(fds)
  where 
    writeVar(f, ClosureV(args, e, E)) --> _
    