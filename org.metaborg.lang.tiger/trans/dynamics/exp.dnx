module exp

imports common

rules
  eval-exp(Int(v)) = return(int(v))
  
  eval-exp(Uminus(exp)) = return(ineg(eval-exp(exp)))
  
  eval-exp(Var(name)) = return(get(cur(), resolveVar(name)))
  
  eval-exp(Seq(list)) =
    return(eval-seq(list))
  
  eval-seq([h]) = 
    v1 <- eval-exp(h);
    return(v1)
  eval-seq([h:UNIT() | t]) = 
    eval-unit-exp(h);
    return(eval-seq(t))
  eval-seq([h | t]) = 
    v1 <- eval-exp(h);
    return(eval-seq(t))
  
  
  eval-unit-exp(Seq(list)) =
    eval-unit-seq(list)
  
  eval-unit-seq([h]) = 
    eval-unit-exp(h)
  
  eval-unit-seq([h:UNIT() | t]) = 
    eval-unit-exp(h);
    eval-unit-seq(t)
  eval-unit-seq([h | t]) = 
    v1 <- eval-exp(h);
    eval-unit-seq(t)
 
  eval-unit-exp(Assign(Var(var), exp)) =
    v1 <- eval-exp(exp);
    set(cur(), resolveVar(var), v1)
