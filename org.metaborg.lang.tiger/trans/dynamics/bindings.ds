module dynamics/bindings

imports ds-signatures/Bindings-sig
imports dynamics/base
imports dynamics/store
imports dynamics/nabl2-link
imports nabl2/statics/tiger

// binding values to identifiers

signature
  arrows
    readVar(Id) --> V
    writeVar(Id, V) --> V
    bindVar(Id, V) --> Env 
//    
//rules
//
//  readVar(x) --> read(lookup_(x))
//
//  writeVar(x, vv) --> write(lookup_(x), vv)
//  
//  E |- bindVar(x, vv) --> {x |--> a, E}
//  where allocate(vv) --> a
    
signature
  sorts U
  constructors U: U
  arrows   
    Dec --> U
    evalDecs(List(Dec)) --> U
    evalSeq(List(Exp)) --> V

  components
    FS: (Frame * Frame)

rules // bindings
  
  F |- l@Let(decs, es) --> vv
  where
    bodyScope(l) --> s_body;
    DefaultSlots(declsOf(s_body)) --> slots;
    initFrame(s_body, {}, slots) --> F_body;
    FS (F, F_body) |- evalDecs(decs) --> _;
    F_body |- evalSeq(es) --> vv
  
  FS (F_outer, F_body) |- evalDecs([]) --> U()
  where
    addLink(F_body, P(), scopeOf(F_outer) : Scope, F_outer) --> _
  
  FS (F_outer, F_body) |- evalDecs([dec]) --> U()
  where
    addLink(F_body, P(), scopeOf(F_outer) : Scope, F_outer) --> _;
    FS (F_body, F_outer) |- dec --> _
  
  FS (F_outer, F_body) |- evalDecs([d@dec | decs@[_|_]]) --> U()
  where
    bodyScope(d) --> s_dec;
    DefaultSlots(declsOf(s_dec)) --> slots;
    initFrame(s_dec, { P() |--> { scopeOf(F_outer) : Scope |--> F_outer}}, slots) --> F_dec;
    FS (F_dec, F_outer) |- dec --> _;
    FS (F_dec, F_body) |- evalDecs(decs) --> _

    
    
    