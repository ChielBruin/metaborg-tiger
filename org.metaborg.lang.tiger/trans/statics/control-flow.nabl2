module statics/control-flow

imports signatures/-
imports statics/nabl-lib
imports statics/base

rules // Try-Catch

  [[stm@Throw(e1) ^(s) : UNIT()]] :=
    Catch{"__catch__"@stm} -> s,
    Catch{"__catch__"@stm} |-> d,
    d : ty1,
    [[e1 ^(s) : ty2]],
    ty1 == ty2 | error $[Expected [ty1], but found [ty2]].
    
  [[ stm@TryCatch(e1, Var(var), e2) ^ (s) : UNIT() ]] :=
     new try_s, try_s ---> s,
     new catch_s, catch_s ---> s,
     Catch{"__catch__"@stm} <- try_s,
     Catch{"__catch__"@stm} : INT()!,
     Var{var} <- catch_s,
     Var{var} : INT()!,
     
     [[ e1 ^ (try_s)   : UNIT() ]], 
     [[ e2 ^ (catch_s) : UNIT() ]].

rules // sequence

  Seq[[ [] ^ (s) : UNIT() ]].  
   
  Seq[[ [e] ^ (s) : ty ]] :=
    [[ e ^ (s) : ty ]].
    
  Seq[[ [ e | es@[_|_] ] ^ (s) : ty ]] := 
    [[ e ^ (s) : ty' ]], Seq[[ es ^ (s) : ty ]].
    
    // note: pattern overlaps with previous rule; depends
    // on order of evaluation; should check that es is not empty
    
  [[ Seq(es) ^ (s) : ty ]] :=
     Seq[[ es ^ (s) : ty ]].
     
  [[ If(e1, e2, e3) ^ (s) : ty2 ]] := 
     [[ e1 ^ (s) : INT() ]], 
     [[ e2 ^ (s) : ty2 ]], 
     [[ e3 ^ (s) : ty3 ]],
     ty2 <? ty3 | error $[branches types do not match].
//     (ty2 <? ty3) | (ty3 <? ty2) | error $[branches types do not match].
//     ty2 == ty3 | error $[branches should have same type].
     
  [[ IfThen(e1, e2) ^ (s) : UNIT() ]] := 
     [[ e1 ^ (s) : INT() ]], 
     [[ e2 ^ (s) : UNIT() ]].
     
  [[ stm@While(e1, e2) ^ (s) : UNIT() ]] := 
     new s', s' -P-> s,
     @stm.bodyScope := s',
     Loop{"__break__"@stm} <- s',
     Loop{"__break__"@stm} : UNIT(),
     [[ e1 ^ (s) : INT() ]], 
     [[ e2 ^ (s') : UNIT() ]].

  [[ stm@For(Var(x), e1, e2, e3) ^ (s) : UNIT() ]] := 
     new s_for, 
     s_for -P-> s,
     @stm.bodyScope := s_for,
     Var{x} <- s_for,
     Var{x} : INT(),
     Loop{"__break__"@stm} <- s_for,
     Loop{"__break__"@stm} : UNIT(),
     [[ e1 ^ (s) : INT() ]], // x not bound in loop bounds
     [[ e2 ^ (s) : INT() ]], 
     [[ e3 ^ (s_for) : UNIT() ]]. // x bound in body
     
  [[ stm@Break() ^ (s) : UNIT() ]] := 
     Loop{"__break__"@stm} -> s,
     Loop{"__break__"@stm} |-> d.
    