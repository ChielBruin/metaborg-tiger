module statics/base

imports signatures/-
imports statics/nabl-lib

signature
  name resolution
//    namespaces
//      Type Var Field Loop
    labels 
      P I 
    well-formedness 
      P* . I*
    order
      D < P, 
      D < I, 
      I < P
      
signature     
  constructors 
    UNIT : Type
    INT : Type
    STRING : Type
    NIL : Type
    RECORD : scope -> Type
    ARRAY : Type * scope -> Type
    FUN : Type * Type -> Type // List(Type) * Type -> Type
    
//    FUN(contravar List(type), covar type)

rules

  init ^ (s) : ty_init := 
    new s,               // the root scope
    
    Type{"int"} <- s,    // declare primitive type int
    Type{"int"} : INT() !!,
    
    Type{"string"} <- s, // declare primitive type string
    Type{"string"} : STRING() !!,
    
    // standard library
    
    Var{"print"} <- s,   
    Var{"print"} : FUN([STRING()], UNIT()) !!,
    
    Var{"flush"} <- s,   
    Var{"flush"} : FUN([], UNIT()) !!,
    
    Var{"getchar"} <- s,   
    Var{"getchar"} : FUN([], STRING()) !!,
    
    Var{"ord"} <- s,   
    Var{"ord"} : FUN([STRING()], INT()) !!,
    
    Var{"chr"} <- s,   
    Var{"chr"} : FUN([INT()], STRING()) !!,
    
    Var{"size"} <- s,   
    Var{"size"} : FUN([STRING()], INT()) !!,
    
    Var{"substring"} <- s,   
    Var{"substring"} : FUN([STRING(), INT(), INT()], STRING()) !!,
    
    Var{"concat"} <- s,   
    Var{"concat"} : FUN([STRING(), STRING()], STRING()) !!,
    
    Var{"not"} <- s,   
    Var{"not"} : FUN([INT()], INT()) !!,
    
    Var{"exit"} <- s,   
    Var{"exit"} : FUN([INT()], UNIT()) !!.
    
    