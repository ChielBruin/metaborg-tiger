module Types

imports Identifiers
imports Bindings
imports Occurrences

sorts Type 

context-free syntax // type declarations
   
  Dec.TypeDecs = <<{TypeDec "\n"}+>> {longest-match}
  
  TypeDec.TypeDec = <type <Id> = <Type>> 
  TypeDec.TypeDec_ = <type <Occurrence> = <Type>> 
  
context-free syntax // type expressions

  Type = TypeId 
  TypeId.Tid  = Id 
  TypeId.Tid_  = Occurrence 
  
sorts Ty
context-free syntax // semantic types

  Ty.INT      = <INT> 
  Ty.STRING   = <STRING> 
  Ty.NIL      = <NIL> 
  Ty.UNIT     = <UNIT> 
  Ty.NAME     = <NAME <Id>> 
  Ty.RECORD   = <RECORD <Id>>
  Ty.ARRAY    = <ARRAY <Ty> <Id>> 
  Ty.FUN      = <FUN ( <{Ty ","}*> ) <Ty>> 
