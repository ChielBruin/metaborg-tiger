//https://github.com/smarr/are-we-fast-yet/blob/master/benchmarks/Java/src/Permute.java
//let
//  var a : int := 10
//in
//  let
//    var count: int := 42 
////    var foo: int := count
//  in
//  //  count + foo
//    a
//  end
//end

let
  type R = {
    f : int
  } 
  var r : R := R{f = 1} 
  
in
  r.f
end

//let
//  function fact(n : int) : int = 
//    if n < 1 then 1 else (n * fact(n - 1))
//in
//  fact(10)
//end

//let
//  var a : int := 42
//in
//  let
//    function inca(n : int) : int = a + n
//  in
//    a := -1;
//    inca(1)
//  end
//end

//let
//  var a : int := 1
//  var b : int := -1
//in 
//  if a < b then 42 else -99
//end


//let function fact(n : int) : int = 
//      if n < 1 then 1 else (n * fact(n - 1))
// in fact(10)
//end

//for i := 0 to 30
//do
//  (
//  timeGo();
//  let
//    type vector = array of int
//  in
//    let
//      var count: int := 0
//      var v: vector := vector[6] of 0
//      
//      function swap(i: int, j: int) =
//        let
//          var tmp: int := v[i]
//        in
//          v[i] := v[j];
//          v[j] := tmp
//        end
//      
//      function permute(n: int) =
//        (
//          count := count + 1;
//          if n <> 0
//          then
//            let
//              var n1: int := n - 1
//            in
//              permute(n1);
//              let
//                var i:int := n1
//              in
//                while i >= 0
//                do (
//                  swap(n1, i);
//                  permute(n1);
//                  swap(n1, i);
//                  i := i - 1
//                )
//              end
//            end
//        )
//        
//        
//    in
//      permute(6);
//      count // 8660
//    end
//  end;
//  timeStop())