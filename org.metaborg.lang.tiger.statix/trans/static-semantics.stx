module static-semantics

signature
  sorts Occ = Id
  sorts Id = string

signature
  sorts Module Exp
  constructors
    Mod : Exp -> Module

rules // single-file entry point

  programOK : Module
  
  programOK(Mod(e)) :- {s T}
    new s, init(s),
    typeOfExp(s, e) == T.
    
rules // multi-file entry point

//  projectOk : scope
//  projectOk(s).
//  fileOk : scope * Start
//  fileOk(s, Empty()).

signature // names
  namespaces
    Var   : string
    Type  : string
    Loop  : string
    Field : string
    
  name-resolution
    labels P R
    resolve Var   filter P* min $ < P
    resolve Loop  filter P* min $ < P
    resolve Type  filter P* min $ < P
    resolve Field filter P* min $ < P
    
  relations 
    typeOfDecl : occurrence -> TYPE 
    
signature     
  sorts TYPE
  constructors
    UNIT   : TYPE
    INT    : TYPE
    STRING : TYPE
    NIL    : TYPE
    RECORD : scope -> TYPE
    ARRAY  : TYPE * scope -> TYPE
    FUN    : list(TYPE) * TYPE -> TYPE
    
rules

  subtype : TYPE * TYPE
  
  subtype(T, T).
  
  // subtype(STRING(), STRING()).
  
  subtype(NIL(), RECORD(s)).
  
  subtypes : list(TYPE) * list(TYPE)
  
  subtypes([], []).
  
  subtypes([T | Ts], [S | Ss]) :-
    subtype(T, S),
    subtypes(Ts, Ss).
    
  equitype : TYPE * TYPE 
  
  equitype(T, T).
  equitype(NIL(), RECORD(s)).
  equitype(RECORD(s), NIL()).
  
  lub : TYPE * TYPE -> TYPE
  lub(S, T) = S.
  lub(NIL(), T) = T.

rules

  decsOk     : scope * scope * list(Dec)
  decOk      : scope * scope * Dec
  fdecsOk      maps fdecOk(*, *, list(*))
  fdecOk     : scope * scope * FunDec
  tdecsOk      maps tdecOk(*, *, list(*))
  tdecOk     : scope * scope * TypeDec
  typeOfExp  : scope * Exp -> TYPE
  typeOfExps : scope * list(Exp) -> list(TYPE)
//  typeOfExps   maps typeOfExp(*, list(*)) = list(*)
  typeOfSeq  : scope * list(Exp) -> TYPE
  typeOfArgs   maps typeOfArg(*, *, list(*)) = list(*)
  typeOfArg  : scope * scope * FArg -> TYPE
  typeOfType : scope * Type -> TYPE
  typeOfLVal : scope * LValue -> TYPE
  
signature
  sorts TypeDec
  sorts TypeId = Occ
  constructors
    TypeDecs  : list(TypeDec) -> Dec
    TypeDec   : TypeId * Type -> TypeDec
    Tid       : TypeId -> Type

rules // type declarations

  // Types: In the expression [let ... typedecs ... in exps end] the
  // scope of a type identifier starts at the beginning of the 
  // consecutive sequence of type declarations defining it and lasts
  // until the end. The includes the headers and bodies of any functions
  // with the scope.
  
  // Name spaces: There are two different name spaces: one for types,
  // and one for functions and variables. A type [a] can be "in scope"
  // at the same time as a variable [a] or a function [a], but 
  // variables and functions of the same name cannot both be in 
  // scope simultaneously (one will hide the other).
    
  decOk(s, s_outer, TypeDecs(tdecs)) :- 
    tdecsOk(s, s, tdecs).

  tdecOk(s, s_outer, TypeDec(x, t)) :- {T} 
    typeOfType(s_outer, t) == T,
    s -> Type{x@x} with typeOfDecl T.
     
   // note: type declarations in a sequence are mutually recursive

rules // types

  typeOfType(s, Tid(x)) = T :-
    typeOfDecl of Type{x@x} in s |-> [(_, (_, T))].

signature
  sorts LValue Type
  constructors
    ArrayTy      : TypeId -> Type
    Array        : TypeId * Exp * Exp -> Exp
    Subscript    : LValue * Exp -> LValue

rules // arrays

  typeOfType(s, ArrayTy(x)) = ARRAY(T, s_arr) :-
    new s_arr, // unique token to distinghuish the array type
    typeOfType(s, Tid(x)) == T.

//  [[ ArrayTy(t) ^ (s) : ARRAY(ty, s')]] := 
//     new s', // unique token to distinghuish the array type
//     [[ t ^ (s) : ty ]].
 
rules // array creation
     
  typeOfExp(s, Array(x, e1, e2)) = ARRAY(T, s_arr) :- {S}
    typeOfType(s, Tid(x)) == ARRAY(S, s_arr),
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == T,
    subtype(T, S).
  
//  [[ Array(t, e1, e2) ^ (s) : ty ]] :=
//     [[ t ^ (s) : ty ]],
//     ty == ARRAY(ty_elem, s_arr) | error $[array type expected],
//     ty_elem2 <? ty_elem | error $[type mismatch [ty_indic] expected] @ e2,
//     [[ e1 ^ (s) : INT() ]], // length
//     [[ e2 ^ (s) : ty_elem2 ]]. // initial value

rules // array indexing

  typeOfLVal(s, Subscript(e1, e2)) = T :- {s_arr}
    typeOfLVal(s, e1) == ARRAY(T, s_arr),
    typeOfExp(s, e2) == INT().
    
//  [[ Subscript(e1, e2) ^ (s) : ty ]] :=
//     [[ e1 ^ (s) : ty_arr ]],
//     ty_arr == ARRAY(ty, s_arr),
//     [[ e2 ^ (s) : INT() ]].

signature
  sorts Declarations
  constructors
    Let          : list(Dec) * list(Exp) -> Exp
    Declarations : list(Dec) -> Declarations

rules

  typeOfExp(s_outer, Let(ds, es)) = T :- {s_body}
    new s_body,
    decsOk(s_outer, s_body, ds),
    typeOfSeq(s_body, es) == T.
    // TODO: declarations should be distinct

  decsOk(s_outer, s_body, []) :-
    s_body -P-> s_outer.

  decsOk(s_outer, s_body, [dec]) :-
    s_body -P-> s_outer,
    decOk(s_body, s_outer, dec).

  decsOk(s_outer, s_body, [dec | decs@[_|_]]) :- {s_dec}
    new s_dec,
    s_dec -P-> s_outer,
    decOk(s_dec, s_outer, dec),
    decsOk(s_dec, s_body, decs).
    // TODO: distinct names

signature
  sorts Dec FunDec FArg
  constructors
    FunDecs  : list(FunDec) -> Dec
    ProcDec  : Occ * list(FArg) * Exp -> FunDec
    FunDec   : Occ * list(FArg) * Type * Exp -> FunDec
    FArg     : Occ * Type -> FArg
    Call     : Occ * list(Exp) -> Exp
    
rules // function declarations

  // Parameters: In [function id(... id1: id2 ...) = exp] the
  // scope of the parameter id1 lasts throughout the function
  // body exp
        
  decOk(s, s_outer, FunDecs(fdecs)) :- 
    fdecsOk(s, s_outer, fdecs).
    
  fdecOk(s, s_outer, d@ProcDec(f, args, e)) :- {s_fun Ts}
    new s_fun, s_fun -P-> s,
    typeOfArgs(s_fun, s_outer, args) == Ts,
    s -> Var{f@f} with typeOfDecl FUN(Ts, UNIT()),
    typeOfExp(s_fun, e) == UNIT().
    // TODO: distinct names
    
  fdecOk(s, s_outer, d@FunDec(f, args, t, e)) :- {s_fun Ts T S}   
    new s_fun, s_fun -P-> s,
    typeOfArgs(s_fun, s_outer, args) == Ts,
    typeOfType(s_outer, t) == T,
    s -> Var{f@f} with typeOfDecl FUN(Ts, T),
    typeOfExp(s_fun, e) == S,
    subtype(S, T).
    // TODO: distinct argument names
     
  typeOfArg(s_fun, s_outer, FArg(x, t)) = T :- 
    typeOfType(s_outer, t) == T,
    s_fun -> Var{x@x} with typeOfDecl T. 
     
rules // function calls

  typeOfExp(s, Call(f, es)) = T :- {Ts Ss} 
    typeOfDecl of Var{f@f} in s |-> [(_, (_, FUN(Ts, T)))],
    typeOfExps(s, es) == Ss,
    subtypes(Ss, Ts).
    
  typeOfExps(s, []) = [].

  typeOfExps(s, [e | es]) = 
    [typeOfExp(s, e) | typeOfExps(s, es)].
         
signature
  sorts Var
  constructors
    VarDec       : Occ * Type * Exp -> Dec
    VarDecNoType : Occ * Exp -> Dec
    Var          : Occ -> Var
    V2L          : Var -> LValue
    L2E          : LValue -> Exp
    Assign       : LValue * Exp -> Exp

rules // variable declarations

  // Local variables: In the expression [let ... vardec ... in exp end], 
  // the scope of the declared variable starts just after its vardec 
  // and lasts until the end.
  
  decOk(s, s_outer, VarDec(x, t, e)) :- {T S}
    typeOfType(s_outer, t) == T, 
    typeOfExp(s_outer, e) == S,
    subtype(S, T),
    s -> Var{x@x} with typeOfDecl T.

  decOk(s, s_outer, VarDecNoType(x, e)) :- {T}
    typeOfExp(s_outer, e) == T,
    T != NIL(),
    s -> Var{x@x} with typeOfDecl T.
         
rules // variable references

  typeOfExp(s, L2E(V2L(Var(x)))) = T :-
    typeOfDecl of Var{x@x} in s |-> [(_, (_, T))].
 
rules // statements

  typeOfExp(s, Assign(e1, e2)) = UNIT() :- {T S}
    typeOfLVal(s, e1) == T,
    typeOfExp(s, e2) == S,
    subtype(S, T). 
                  
rules 

  typeOfLVal(s, V2L(Var(x))) = T :- 
    typeOfDecl of Var{x@x} in s |-> [(_, (_, T))].
    
  typeOfExp(s, L2E(lval)) = typeOfLVal(s, lval).

signature
  constructors
    Seq           : list(Exp) -> Exp
    If            : Exp * Exp * Exp -> Exp
    IfThen        : Exp * Exp -> Exp
    While         : Exp * Exp -> Exp
    For           : Var * Exp * Exp * Exp -> Exp
    Break         : Exp
    
rules // sequence

  typeOfSeq(s, []) = UNIT().

  typeOfSeq(s, [e]) = T :-
    typeOfExp(s, e) == T.

  typeOfSeq(s, [e | es@[_|_]]) = T :- {S}
    typeOfExp(s, e) == S,
    typeOfSeq(s, es) == T.
    
  typeOfExp(s, Seq(es)) = typeOfSeq(s, es).
    
  typeOfExp(s, If(e1, e2, e3)) = lub(T, S) :- 
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == T,
    typeOfExp(s, e3) == S,
    equitype(S, T).

  typeOfExp(s, IfThen(e1, e2)) = UNIT() :-
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == UNIT().
    
  typeOfExp(s, stm@While(e1, e2)) = UNIT() :- {s_loop}
    new s_loop, s_loop -P-> s,
    s_loop -> Loop{"break"@stm} with typeOfDecl UNIT(),
    typeOfExp(s_loop, e1) == INT(),
    typeOfExp(s_loop, e2) == UNIT().

  typeOfExp(s, stm@For(Var(x), e1, e2, e3)) = UNIT() :- {s_for}
    new s_for,
    s_for -P-> s,
    s_for -> Var{x@x} with typeOfDecl INT(),
    s_for -> Loop{"break"@stm} with typeOfDecl UNIT(),
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT(),
    typeOfExp(s_for, e3) == UNIT().
     
  typeOfExp(s, Break()) = UNIT() :- 
    typeOfDecl of Loop{"__break__"@_} in s |-> [(_, (_, UNIT()))].
     
signature
   sorts IntConst = string 
   sorts RealConst = string 
   sorts Sign = string
  constructors
    Int            : IntConst -> Exp
    Uminus         : Exp -> Exp
    Times          : Exp * Exp -> Exp
    Divide         : Exp * Exp -> Exp
    Plus           : Exp * Exp -> Exp
    Minus          : Exp * Exp -> Exp
    Eq             : Exp * Exp -> Exp
    Neq            : Exp * Exp -> Exp
    Gt             : Exp * Exp -> Exp
    Lt             : Exp * Exp -> Exp
    Geq            : Exp * Exp -> Exp
    Leq            : Exp * Exp -> Exp
    And            : Exp * Exp -> Exp
    Or             : Exp * Exp -> Exp
    Exp-Plhdr      : Exp

rules // literals    

  typeOfExp(s, Int(i)) = INT().
  
rules // operators

  typeOfExp(s, Uminus(e)) = INT() :-
    typeOfExp(s, e) == INT().
   
  typeOfExp(s, Divide(e1, e2)) = INT() :-
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().
   
  typeOfExp(s, Times(e1, e2)) = INT() :-
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().
   
  typeOfExp(s, Minus(e1, e2)) = INT() :-
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().
   
  typeOfExp(s, Plus(e1, e2)) = INT() :-
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().
   
  typeOfExp(s, Eq(e1, e2)) = INT() :- {T S}
    typeOfExp(s, e1) == T,
    typeOfExp(s, e2) == S,
    equitype(T, S).
    // TODO: does Eq work for all types?
    
  typeOfExp(s, Neq(e1, e2)) = INT() :- {T S}
    typeOfExp(s, e1) == T,
    typeOfExp(s, e2) == S,
    equitype(T, S).
    // TODO: does Neq work for all types?

  typeOfExp(s, Gt(e1, e2)) = INT() :- 
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().
    // TODO: does Gt work for more types?

  typeOfExp(s, Lt(e1, e2)) = INT() :- 
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().

  typeOfExp(s, Geq(e1, e2)) = INT() :-
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().

  typeOfExp(s, Leq(e1, e2)) = INT() :- 
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().

  typeOfExp(s, Or(e1, e2)) = INT() :- 
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().

  typeOfExp(s, And(e1, e2)) = INT() :- 
    typeOfExp(s, e1) == INT(),
    typeOfExp(s, e2) == INT().
     
signature
  sorts Field InitField 
  constructors
    RecordTy   : list(Field) -> Type
    Field      : Occ * TypeId -> Field
    NilExp     : Exp
    Record     : TypeId * list(InitField) -> Exp
    InitField  : Occ * Exp -> InitField
    FieldVar   : LValue * Occ -> LValue
  
rules // record type

  typeOfType(s, RecordTy(fields)) = RECORD(s_rec) :-
    new s_rec,
    fieldsOk(s_rec, s, fields).
    // TODO: distinct field names

  fieldOk : scope * scope * Field
  fieldsOk maps fieldOk(*, *, list(*))
  
  fieldOk(s_rec, s_outer, Field(x, t)) :- {T}
    typeOfType(s_outer, Tid(t)) == T,
    s_rec -> Field{x@x} with typeOfDecl T.

rules // literals    

  typeOfExp(s, NilExp()) = NIL().

rules // record creation   

  typeOfExp(s, Record(t, inits)) = RECORD(s_rec) :-
    typeOfType(s, Tid(t)) == RECORD(s_rec),
    initsOk(s, s_rec, inits).
    // TODO: distinct names
    
  initOk : scope * scope * InitField
  initsOk maps initOk(*, *, list(*))
  
  initOk(s, s_rec, InitField(x, e)) :- {S T}
    typeOfDecl of Field{x@x} in s_rec |-> [(_, (_, T))],
    typeOfExp(s, e) == S,
    subtype(S, T).
 
rules // record field access

  typeOfLVal(s, FieldVar(e, x)) = T :- {s_rec}
    typeOfLVal(s, e) == RECORD(s_rec),
    query typeOfDecl in s_rec |-> [(_, (Field{x@_}, T))].
  
signature
  sorts StrConst = string
  constructors
    String : StrConst -> Exp  
    
rules // literals  

  typeOfExp(s, String(_)) = STRING().    
    
rules

  init : scope 
  
  init(s) :- 
    s -> Type{"int"@_}      with typeOfDecl INT(),
    s -> Type{"string"@_}   with typeOfDecl STRING(),
    s -> Var{"print"@_}     with typeOfDecl FUN([STRING()], UNIT()),
    s -> Var{"chr"@_}       with typeOfDecl FUN([INT()], STRING()),
    s -> Var{"ord"@_}       with typeOfDecl FUN([STRING()], INT()),
    s -> Var{"size"@_}      with typeOfDecl FUN([STRING()], INT()),
    s -> Var{"substring"@_} with typeOfDecl FUN([STRING(), INT(), INT()], STRING()),
    s -> Var{"concat"@_}    with typeOfDecl FUN([STRING(), STRING()], STRING()),
    s -> Var{"not"@_}       with typeOfDecl FUN([INT()], INT()),
    s -> Var{"exit"@_}      with typeOfDecl FUN([INT()], UNIT()),
    s -> Var{"getchar"@_}   with typeOfDecl FUN([], STRING()),
    s -> Var{"flush"@_}     with typeOfDecl FUN([], UNIT()),
    s -> Var{"printi"@_}    with typeOfDecl FUN([INT()], UNIT()).
    
//    Var{"timeGo"} <- s,
//    Var{"timeGo"} : FUN([], UNIT()) !!,
//    Var{"timeStop"} <- s,
//    Var{"timeStop"} : FUN([], UNIT()) !!,
    